{"version":3,"file":"tracingHelper.js","sourceRoot":"","sources":["../../src/tracingHelper.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport type { PipelineRequest, PipelineResponse } from \"@azure/core-rest-pipeline\";\nimport type { TracingSpan } from \"@azure/core-tracing\";\nimport { isError } from \"@azure/core-util\";\nimport type {\n  ChatRequestAssistantMessage,\n  ChatRequestMessage,\n  ChatRequestSystemMessage,\n  ChatRequestToolMessage,\n} from \"./models.js\";\nimport type {\n  ChatChoiceOutput,\n  ChatCompletionsOutput,\n  ChatCompletionsToolCallOutput,\n} from \"./outputModels.js\";\nimport type { GetChatCompletionsBodyParam } from \"./parameters.js\";\n/*\n* Add event to span.  Sample:\n    {\n    name: 'gen_ai.user.message',\n    attributes: {\n      'gen_ai.system': 'INFERENCE_GEN_AI_SYSTEM_NAME',\n      'gen_ai.event.content': `{\"role\":\"user\",\"content\":\"What's the weather like in Boston?\"}`  \n    },\n    time: [ 1725666879, 622695900 ],\n    droppedAttributesCount: 0\n  },\n*/\n/*\n* Add event to span.  Sample:\n{\n  name: 'gen_ai.choice',\n  attributes: {\n    'gen_ai.system': 'INFERENCE_GEN_AI_SYSTEM_NAME',\n    'gen_ai.event.content': '{\"finish_reason\":\"tool_calls\",\"index\":0,\"message\":{\"content\":\"\"}}'\n  },\n  time: [ 1725666881, 780608000 ],\n  droppedAttributesCount: 0\n}  \n*/\n\nenum TracingAttributesEnum {\n  Operation_Name = \"gen_ai.operation.name\",\n  Request_Model = \"gen_ai.request.model\",\n  System = \"gen_ai.system\",\n  Error_Type = \"error.type\",\n  Server_Port = \"server.port\",\n  Request_Frequency_Penalty = \"gen_ai.request.frequency_penalty\",\n  Request_Max_Tokens = \"gen_ai.request.max_tokens\",\n  Request_Presence_Penalty = \"gen_ai.request.presence_penalty\",\n  Request_Stop_Sequences = \"gen_ai.request.stop_sequences\",\n  Request_Temperature = \"gen_ai.request.temperature\",\n  Request_Top_P = \"gen_ai.request.top_p\",\n  Response_Finish_Reasons = \"gen_ai.response.finish_reasons\",\n  Response_Id = \"gen_ai.response.id\",\n  Response_Model = \"gen_ai.response.model\",\n  Usage_Input_Tokens = \"gen_ai.usage.input_tokens\",\n  Usage_Output_Tokens = \"gen_ai.usage.output_tokens\",\n  Server_Address = \"server.address\",\n}\n\nconst INFERENCE_GEN_AI_SYSTEM_NAME = \"az.ai.inference\";\n\nconst isContentRecordingEnabled = (): boolean =>\n  envVarToBoolean(\"AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED\");\n\nexport function getRequestBody(request: PipelineRequest): GetChatCompletionsBodyParam {\n  return { body: JSON.parse(request.body as string) };\n}\n\nexport function getSpanName(request: PipelineRequest): string {\n  const { body } = getRequestBody(request);\n  return `chat ${body?.model ?? \"\"}`.trim();\n}\n\nexport function onStartTracing(span: TracingSpan, request: PipelineRequest, url: string): void {\n  if (!span.isRecording()) {\n    return;\n  }\n\n  const urlObj = new URL(url);\n  const port = Number(urlObj.port) || (urlObj.protocol === \"https:\" ? undefined : 80);\n  if (port) {\n    span.setAttribute(TracingAttributesEnum.Server_Port, port);\n  }\n\n  span.setAttribute(TracingAttributesEnum.Server_Address, urlObj.hostname);\n  span.setAttribute(TracingAttributesEnum.Operation_Name, \"chat\");\n  span.setAttribute(TracingAttributesEnum.System, \"az.ai.inference\");\n  const { body } = getRequestBody(request);\n  if (!body) return;\n  span.setAttribute(TracingAttributesEnum.Request_Model, body.model);\n  span.setAttribute(TracingAttributesEnum.Request_Frequency_Penalty, body.frequency_penalty);\n  span.setAttribute(TracingAttributesEnum.Request_Max_Tokens, body.max_tokens);\n  span.setAttribute(TracingAttributesEnum.Request_Presence_Penalty, body.presence_penalty);\n  span.setAttribute(TracingAttributesEnum.Request_Stop_Sequences, body.stop);\n  span.setAttribute(TracingAttributesEnum.Request_Temperature, body.temperature);\n  span.setAttribute(TracingAttributesEnum.Request_Top_P, body.top_p);\n  if (body.messages) {\n    addRequestChatMessageEvent(span, body.messages);\n  }\n}\n\nexport function tryProcessResponse(span: TracingSpan, response?: PipelineResponse): void {\n  if (!span.isRecording()) {\n    return;\n  }\n\n  if (response?.bodyAsText) {\n    const body: any = JSON.parse(response.bodyAsText);\n    if (body.error ?? body.message) {\n      span.setAttribute(TracingAttributesEnum.Error_Type, `${body.status ?? body.statusCode}`);\n      span.setStatus({\n        status: \"error\",\n        error: body.error ?? body.message, // message is not in the schema of the response, but it can present if there is crediential error\n      });\n    }\n    span.setAttribute(TracingAttributesEnum.Response_Id, body.id);\n    span.setAttribute(TracingAttributesEnum.Response_Model, body.model);\n    if (body.choices) {\n      span.setAttribute(\n        TracingAttributesEnum.Response_Finish_Reasons,\n        body.choices.map((choice: ChatChoiceOutput) => choice.finish_reason).join(\",\"),\n      );\n    }\n    if (body.usage) {\n      span.setAttribute(TracingAttributesEnum.Usage_Input_Tokens, body.usage.prompt_tokens);\n      span.setAttribute(TracingAttributesEnum.Usage_Output_Tokens, body.usage.completion_tokens);\n    }\n    addResponseChatMessageEvent(span, body);\n  }\n}\n\nexport function tryProcessError(span: TracingSpan, error: unknown): void {\n  span.setStatus({\n    status: \"error\",\n    error: isError(error) ? error : undefined,\n  });\n}\n\nfunction addRequestChatMessageEvent(span: TracingSpan, messages: Array<ChatRequestMessage>): void {\n  messages.forEach((message: any) => {\n    if (message.role) {\n      const content: {\n        content?: string;\n        tool_calls?: Array<ChatCompletionsToolCallOutput>;\n        id?: string;\n      } = {};\n\n      const chatMsg = message as ChatRequestSystemMessage;\n      if (chatMsg.content) {\n        content.content = chatMsg.content;\n      }\n      if (!isContentRecordingEnabled()) {\n        content.content = \"\";\n      }\n\n      const assistantMsg = message as ChatRequestAssistantMessage;\n      if (assistantMsg.tool_calls) {\n        content.tool_calls = assistantMsg.tool_calls;\n        if (!isContentRecordingEnabled()) {\n          const toolCalls: Array<ChatCompletionsToolCallOutput> = JSON.parse(\n            JSON.stringify(content.tool_calls),\n          );\n          toolCalls.forEach((toolCall) => {\n            if (toolCall.function.arguments) {\n              toolCall.function.arguments = \"\";\n            }\n            toolCall.function.name = \"\";\n          });\n          content.tool_calls = toolCalls;\n        }\n      }\n\n      const toolMsg: ChatRequestToolMessage = message;\n      if (toolMsg.tool_call_id) {\n        content.id = toolMsg.tool_call_id;\n      }\n\n      span.addEvent?.(`gen_ai.${message.role}.message`, {\n        attributes: {\n          \"gen_ai.system\": INFERENCE_GEN_AI_SYSTEM_NAME,\n          \"gen_ai.event.content\": JSON.stringify(content),\n        },\n      });\n    }\n  });\n}\n\nfunction addResponseChatMessageEvent(span: TracingSpan, body: ChatCompletionsOutput): void {\n  if (!span.addEvent) {\n    return;\n  }\n\n  body?.choices?.forEach((choice: ChatChoiceOutput) => {\n    let message: { content?: string; toolCalls?: Array<ChatCompletionsToolCallOutput> } = {};\n\n    if (choice.message.content) {\n      message.content = choice.message.content;\n    }\n    if (choice.message.tool_calls) {\n      message.toolCalls = choice.message.tool_calls;\n    }\n\n    if (!isContentRecordingEnabled()) {\n      message = JSON.parse(JSON.stringify(message));\n      message.content = \"\";\n      if (message.toolCalls) {\n        message.toolCalls.forEach((toolCall) => {\n          if (toolCall.function.arguments) {\n            toolCall.function.arguments = \"\";\n          }\n          toolCall.function.name = \"\";\n        });\n      }\n    }\n\n    const response = {\n      finish_reason: choice.finish_reason,\n      index: choice.index,\n      message,\n    };\n    const attributes = {\n      \"gen_ai.system\": INFERENCE_GEN_AI_SYSTEM_NAME,\n      \"gen_ai.event.content\": JSON.stringify(response),\n    };\n\n    span.addEvent?.(\"gen_ai.choice\", { attributes });\n  });\n}\n\nfunction envVarToBoolean(key: string): boolean {\n  const value = process.env[key] ?? process.env[key.toLowerCase()];\n  return value !== \"false\" && value !== \"0\" && Boolean(value);\n}\n"]}