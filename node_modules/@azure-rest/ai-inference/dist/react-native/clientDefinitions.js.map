{"version":3,"file":"clientDefinitions.js","sourceRoot":"","sources":["../../src/clientDefinitions.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport type { Client, StreamableMethod } from \"@azure-rest/core-client\";\nimport type {\n  GetChatCompletionsParameters,\n  GetEmbeddingsParameters,\n  GetImageEmbeddingsParameters,\n  GetModelInfoParameters,\n} from \"./parameters.js\";\nimport type {\n  GetChatCompletions200Response,\n  GetChatCompletionsDefaultResponse,\n  GetEmbeddings200Response,\n  GetEmbeddingsDefaultResponse,\n  GetImageEmbeddings200Response,\n  GetImageEmbeddingsDefaultResponse,\n  GetModelInfo200Response,\n  GetModelInfoDefaultResponse,\n} from \"./responses.js\";\n\nexport interface GetChatCompletions {\n  /**\n   * Gets chat completions for the provided chat messages.\n   * Completions support a wide variety of tasks and generate text that continues from or \"completes\"\n   * provided prompt data. The method makes a REST API call to the `/chat/completions` route\n   * on the given endpoint.\n   */\n  post(\n    options: GetChatCompletionsParameters,\n  ): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse>;\n}\n\nexport interface GetModelInfo {\n  /**\n   * Returns information about the AI model.\n   * The method makes a REST API call to the `/info` route on the given endpoint.\n   * This method will only work when using Serverless API or Managed Compute endpoint.\n   * It will not work for GitHub Models endpoint or Azure OpenAI endpoint.\n   */\n  get(\n    options?: GetModelInfoParameters,\n  ): StreamableMethod<GetModelInfo200Response | GetModelInfoDefaultResponse>;\n}\n\nexport interface GetEmbeddings {\n  /**\n   * Return the embedding vectors for given text prompts.\n   * The method makes a REST API call to the `/embeddings` route on the given endpoint.\n   */\n  post(\n    options: GetEmbeddingsParameters,\n  ): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse>;\n}\n\nexport interface GetImageEmbeddings {\n  /**\n   * Return the embedding vectors for given images.\n   * The method makes a REST API call to the `/images/embeddings` route on the given endpoint.\n   */\n  post(\n    options: GetImageEmbeddingsParameters,\n  ): StreamableMethod<GetImageEmbeddings200Response | GetImageEmbeddingsDefaultResponse>;\n}\n\nexport interface Routes {\n  /** Resource for '/chat/completions' has methods for the following verbs: post */\n  (path: \"/chat/completions\"): GetChatCompletions;\n  /** Resource for '/info' has methods for the following verbs: get */\n  (path: \"/info\"): GetModelInfo;\n  /** Resource for '/embeddings' has methods for the following verbs: post */\n  (path: \"/embeddings\"): GetEmbeddings;\n  /** Resource for '/images/embeddings' has methods for the following verbs: post */\n  (path: \"/images/embeddings\"): GetImageEmbeddings;\n}\n\nexport type ModelClient = Client & {\n  path: Routes;\n};\n"]}