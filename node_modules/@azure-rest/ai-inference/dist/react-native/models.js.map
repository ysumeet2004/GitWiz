{"version":3,"file":"models.js","sourceRoot":"","sources":["../../src/models.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n/** An abstract representation of a chat message as provided in a request. */\nexport interface ChatRequestMessageParent {\n  role: ChatRole;\n}\n\n/**\n * A request chat message containing system instructions that influence how the model will generate a chat completions\n * response.\n */\nexport interface ChatRequestSystemMessage extends ChatRequestMessageParent {\n  /** The chat role associated with this message, which is always 'system' for system messages. */\n  role: \"system\";\n  /** The contents of the system message. */\n  content: string;\n}\n\n/**\n * A request chat message containing developer instructions that influence how the model will generate a chat completions\n * response. Some AI models support a developer message instead of a system message.\n */\nexport interface ChatRequestDeveloperMessage extends ChatRequestMessageParent {\n  /** The chat role associated with this message, which is always 'developer' for developer messages. */\n  role: \"developer\";\n  /** The contents of the developer message. */\n  content: string;\n}\n\n/** A request chat message representing user input to the assistant. */\nexport interface ChatRequestUserMessage extends ChatRequestMessageParent {\n  /** The chat role associated with this message, which is always 'user' for user messages. */\n  role: \"user\";\n  /** The contents of the user message, with available input types varying by selected model. */\n  content: string | Array<ChatMessageContentItem>;\n}\n\n/** An abstract representation of a structured content item within a chat message. */\nexport interface ChatMessageContentItemParent {\n  type: string;\n}\n\n/** A structured chat content item containing plain text. */\nexport interface ChatMessageTextContentItem extends ChatMessageContentItemParent {\n  /** The discriminated object type: always 'text' for this type. */\n  type: \"text\";\n  /** The content of the message. */\n  text: string;\n}\n\n/** A structured chat content item containing an image reference. */\nexport interface ChatMessageImageContentItem extends ChatMessageContentItemParent {\n  /** The discriminated object type: always 'image_url' for this type. */\n  type: \"image_url\";\n  /** An internet location, which must be accessible to the model,from which the image may be retrieved. */\n  image_url: ChatMessageImageUrl;\n}\n\n/** An internet location from which the model may retrieve an image. */\nexport interface ChatMessageImageUrl {\n  /** The URL of the image. */\n  url: string;\n  /**\n   * The evaluation quality setting to use, which controls relative prioritization of speed, token consumption, and\n   * accuracy.\n   *\n   * Possible values: \"auto\", \"low\", \"high\"\n   */\n  detail?: ChatMessageImageDetailLevel;\n}\n\n/** A structured chat content item for audio content passed as a url. */\nexport interface ChatMessageAudioUrlContentItem extends ChatMessageContentItemParent {\n  /** The discriminated object type: always 'audio_url' for this type. */\n  type: \"audio_url\";\n  /** The details of the audio url. */\n  audio_url: ChatMessageInputAudioUrl;\n}\n\n/** The details of the audio url. */\nexport interface ChatMessageInputAudioUrl {\n  /** The URL of the audio content. */\n  url: string;\n}\n\n/** A structured chat content item for audio content passed as base64 encoded data. */\nexport interface ChatMessageAudioDataContentItem extends ChatMessageContentItemParent {\n  /** The discriminated object type: always 'input_audio' for this type. */\n  type: \"input_audio\";\n  /** The details of the input audio data. */\n  input_audio: ChatMessageInputAudio;\n}\n\n/** The details of the input audio data. */\nexport interface ChatMessageInputAudio {\n  /** Base64 encoded audio data */\n  data: string;\n  /**\n   * The audio format of the audio content.\n   *\n   * Possible values: \"wav\", \"mp3\"\n   */\n  format: AudioContentFormat;\n}\n\n/** A request chat message representing response or action from the assistant. */\nexport interface ChatRequestAssistantMessage extends ChatRequestMessageParent {\n  /** The chat role associated with this message, which is always 'assistant' for assistant messages. */\n  role: \"assistant\";\n  /** The content of the message. */\n  content?: string;\n  /**\n   * The tool calls that must be resolved and have their outputs appended to subsequent input messages for the chat\n   * completions request to resolve as configured.\n   */\n  tool_calls?: Array<ChatCompletionsToolCall>;\n}\n\n/** A function tool call requested by the AI model. */\nexport interface ChatCompletionsToolCall {\n  /** The ID of the tool call. */\n  id: string;\n  /** The type of tool call. Currently, only `function` is supported. */\n  type: \"function\";\n  /** The details of the function call requested by the AI model. */\n  function: FunctionCall;\n}\n\n/** The name and arguments of a function that should be called, as generated by the model. */\nexport interface FunctionCall {\n  /** The name of the function to call. */\n  name: string;\n  /**\n   * The arguments to call the function with, as generated by the model in JSON format.\n   * Note that the model does not always generate valid JSON, and may hallucinate parameters\n   * not defined by your function schema. Validate the arguments in your code before calling\n   * your function.\n   */\n  arguments: string;\n}\n\n/** A request chat message representing requested output from a configured tool. */\nexport interface ChatRequestToolMessage extends ChatRequestMessageParent {\n  /** The chat role associated with this message, which is always 'tool' for tool messages. */\n  role: \"tool\";\n  /** The content of the message. */\n  content?: string;\n  /** The ID of the tool call resolved by the provided content. */\n  tool_call_id: string;\n}\n\n/**\n * Represents the format that the model must output. Use this to enable JSON mode instead of the default text mode.\n * Note that to enable JSON mode, some AI models may also require you to instruct the model to produce JSON\n * via a system or user message.\n */\nexport interface ChatCompletionsResponseFormatParent {\n  type: string;\n}\n\n/** A response format for Chat Completions that emits text responses. This is the default response format. */\nexport interface ChatCompletionsResponseFormatText extends ChatCompletionsResponseFormatParent {\n  /** Response format type: always 'text' for this object. */\n  type: \"text\";\n}\n\n/**\n * A response format for Chat Completions that restricts responses to emitting valid JSON objects.\n * Note that to enable JSON mode, some AI models may also require you to instruct the model to produce JSON\n * via a system or user message.\n */\nexport interface ChatCompletionsResponseFormatJsonObject\n  extends ChatCompletionsResponseFormatParent {\n  /** Response format type: always 'json_object' for this object. */\n  type: \"json_object\";\n}\n\n/**\n * A response format for Chat Completions that restricts responses to emitting valid JSON objects, with a\n * JSON schema specified by the caller.\n */\nexport interface ChatCompletionsResponseFormatJsonSchema\n  extends ChatCompletionsResponseFormatParent {\n  /** The type of response format being defined: `json_schema` */\n  type: \"json_schema\";\n  /** The definition of the required JSON schema in the response, and associated metadata. */\n  json_schema: ChatCompletionsResponseFormatJsonSchemaDefinition;\n}\n\n/**\n * Defines the response format for chat completions as JSON with a given schema.\n * The AI model will need to adhere to this schema when generating completions.\n */\nexport interface ChatCompletionsResponseFormatJsonSchemaDefinition {\n  /** A name that labels this JSON schema. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64. */\n  name: string;\n  /**\n   * The definition of the JSON schema. See https://json-schema.org/overview/what-is-jsonschema.\n   * Note that AI models usually only support a subset of the keywords defined by JSON schema.\n   * Consult your AI model documentation to determine what is supported.\n   */\n  schema: Record<string, unknown>;\n  /** A description of the response format, used by the AI model to determine how to generate responses in this format. */\n  description?: string;\n  /**\n   * If set to true, the service will error out if the provided JSON schema contains keywords\n   * not supported by the AI model. An example of such keyword may be `maxLength` for JSON type `string`.\n   * If false, and the provided JSON schema contains keywords not supported by the AI model,\n   * the AI model will not error out. Instead it will ignore the unsupported keywords.\n   */\n  strict?: boolean;\n}\n\n/** The definition of a chat completions tool that can call a function. */\nexport interface ChatCompletionsToolDefinition {\n  /** The type of the tool. Currently, only `function` is supported. */\n  type: \"function\";\n  /** The function definition details for the function tool. */\n  function: FunctionDefinition;\n}\n\n/** The definition of a caller-specified function that chat completions may invoke in response to matching user input. */\nexport interface FunctionDefinition {\n  /** The name of the function to be called. */\n  name: string;\n  /**\n   * A description of what the function does. The model will use this description when selecting the function and\n   * interpreting its parameters.\n   */\n  description?: string;\n  /** The parameters the function accepts, described as a JSON Schema object. */\n  parameters?: unknown;\n}\n\n/** A tool selection of a specific, named function tool that will limit chat completions to using the named function. */\nexport interface ChatCompletionsNamedToolChoice {\n  /** The type of the tool. Currently, only `function` is supported. */\n  type: \"function\";\n  /** The function that should be called. */\n  function: ChatCompletionsNamedToolChoiceFunction;\n}\n\n/** A tool selection of a specific, named function tool that will limit chat completions to using the named function. */\nexport interface ChatCompletionsNamedToolChoiceFunction {\n  /** The name of the function that should be called. */\n  name: string;\n}\n\n/** Represents an image with optional text. */\nexport interface ImageEmbeddingInput {\n  /** The input image encoded in base64 string as a data URL. Example: `data:image/{format};base64,{data}`. */\n  image: string;\n  /**\n   * Optional. The text input to feed into the model (like DINO, CLIP).\n   * Returns a 422 error if the model doesn't support the value or parameter.\n   */\n  text?: string;\n}\n\n/** An abstract representation of a chat message as provided in a request. */\nexport type ChatRequestMessage =\n  | ChatRequestMessageParent\n  | ChatRequestSystemMessage\n  | ChatRequestDeveloperMessage\n  | ChatRequestUserMessage\n  | ChatRequestAssistantMessage\n  | ChatRequestToolMessage;\n/** An abstract representation of a structured content item within a chat message. */\nexport type ChatMessageContentItem =\n  | ChatMessageContentItemParent\n  | ChatMessageTextContentItem\n  | ChatMessageImageContentItem\n  | ChatMessageAudioUrlContentItem\n  | ChatMessageAudioDataContentItem;\n/**\n * Represents the format that the model must output. Use this to enable JSON mode instead of the default text mode.\n * Note that to enable JSON mode, some AI models may also require you to instruct the model to produce JSON\n * via a system or user message.\n */\nexport type ChatCompletionsResponseFormat =\n  | ChatCompletionsResponseFormatParent\n  | ChatCompletionsResponseFormatText\n  | ChatCompletionsResponseFormatJsonObject\n  | ChatCompletionsResponseFormatJsonSchema;\n/** Alias for ExtraParameters */\nexport type ExtraParameters = string;\n/** Alias for ChatRole */\nexport type ChatRole = string;\n/** Alias for ChatMessageImageDetailLevel */\nexport type ChatMessageImageDetailLevel = string;\n/** Alias for AudioContentFormat */\nexport type AudioContentFormat = string;\n/** Alias for ChatCompletionsToolChoicePreset */\nexport type ChatCompletionsToolChoicePreset = string;\n/** Alias for EmbeddingEncodingFormat */\nexport type EmbeddingEncodingFormat = string;\n/** Alias for EmbeddingInputType */\nexport type EmbeddingInputType = string;\n"]}