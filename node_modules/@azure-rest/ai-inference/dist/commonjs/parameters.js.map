{"version":3,"file":"parameters.js","sourceRoot":"","sources":["../../src/parameters.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * THIS IS AN AUTO-GENERATED FILE - DO NOT EDIT!\n *\n * Any changes you make here may be lost.\n *\n * If you need to make changes, please do so in the original source file, \\{project-root\\}/sources/custom\n */\n\nimport type { RequestParameters } from \"@azure-rest/core-client\";\nimport type { RawHttpHeadersInput } from \"@azure/core-rest-pipeline\";\nimport type {\n  ChatCompletionsNamedToolChoice,\n  ChatCompletionsResponseFormat,\n  ChatCompletionsToolChoicePreset,\n  ChatCompletionsToolDefinition,\n  ChatRequestMessage,\n  EmbeddingEncodingFormat,\n  EmbeddingInputType,\n  ExtraParameters,\n  ImageEmbeddingInput,\n} from \"./models.js\";\n\nexport interface GetChatCompletionsHeaders {\n  /**\n   * Controls what happens if extra parameters, undefined by the REST API,\n   * are passed in the JSON request payload.\n   * This sets the HTTP request header `extra-parameters`.\n   *\n   * Possible values: \"error\", \"drop\", \"pass-through\"\n   */\n  \"extra-parameters\"?: ExtraParameters;\n}\n\nexport interface GetChatCompletionsBodyParam {\n  body: {\n    messages: Array<ChatRequestMessage>;\n    frequency_penalty?: number;\n    stream?: boolean;\n    presence_penalty?: number;\n    temperature?: number;\n    top_p?: number;\n    max_tokens?: number;\n    response_format?: ChatCompletionsResponseFormat;\n    stop?: string[];\n    tools?: Array<ChatCompletionsToolDefinition>;\n    tool_choice?: ChatCompletionsToolChoicePreset | ChatCompletionsNamedToolChoice;\n    seed?: number;\n    model?: string;\n  };\n}\n\nexport interface GetChatCompletionsHeaderParam {\n  headers?: RawHttpHeadersInput & GetChatCompletionsHeaders;\n}\n\nexport interface GetEmbeddingsHeaders {\n  /**\n   * Controls what happens if extra parameters, undefined by the REST API,\n   * are passed in the JSON request payload.\n   * This sets the HTTP request header `extra-parameters`.\n   *\n   * Possible values: \"error\", \"drop\", \"pass-through\"\n   */\n  \"extra-parameters\"?: ExtraParameters;\n}\n\nexport interface GetEmbeddingsBodyParam {\n  body?: {\n    input: string[];\n    dimensions?: number;\n    encoding_format?: EmbeddingEncodingFormat;\n    input_type?: EmbeddingInputType;\n    model?: string;\n  };\n}\n\nexport interface GetEmbeddingsHeaderParam {\n  headers?: RawHttpHeadersInput & GetEmbeddingsHeaders;\n}\n\nexport interface GetImageEmbeddingsHeaders {\n  /**\n   * Controls what happens if extra parameters, undefined by the REST API,\n   * are passed in the JSON request payload.\n   * This sets the HTTP request header `extra-parameters`.\n   *\n   * Possible values: \"error\", \"drop\", \"pass-through\"\n   */\n  \"extra-parameters\"?: ExtraParameters;\n}\n\nexport interface GetImageEmbeddingsBodyParam {\n  body: {\n    input: Array<ImageEmbeddingInput>;\n    dimensions?: number;\n    encoding_format?: EmbeddingEncodingFormat;\n    input_type?: EmbeddingInputType;\n    model?: string;\n  };\n}\n\nexport interface GetImageEmbeddingsHeaderParam {\n  headers?: RawHttpHeadersInput & GetImageEmbeddingsHeaders;\n}\n\nexport type GetChatCompletionsParameters = GetChatCompletionsHeaderParam &\n  GetChatCompletionsBodyParam &\n  RequestParameters;\nexport type GetModelInfoParameters = RequestParameters;\nexport type GetEmbeddingsParameters = GetEmbeddingsHeaderParam &\n  GetEmbeddingsBodyParam &\n  RequestParameters;\nexport type GetImageEmbeddingsParameters = GetImageEmbeddingsHeaderParam &\n  GetImageEmbeddingsBodyParam &\n  RequestParameters;\n"]}